package main

import (
	"fmt"
	"log"

	"github.com/gin-gonic/gin"
	resty "github.com/go-resty/resty/v2"
	jsoniter "github.com/json-iterator/go"
	"gorm.io/gorm"
)

func main() {
	baseUrl := "https://www.avanza.se/_api/fund-guide/guide/"
	//url := "https://www.avanza.se/_api/fund-guide/guide/589935"
	funds := []string{"589935", "878733", "927735", "1162060", "64710", "1919", "132510", "1140464", "209089", "1011196", "694253",
		"137448", "2013"}

	// Database
	// Insert Fund data if not exist already
	connectDb()
	shouldReturn := newFunction(funds, baseUrl)
	if shouldReturn {
		return
	}

	r := gin.Default()
	r.SetTrustedProxies(nil)

	r.GET("/", testHandler)
	r.GET("/funds", getFunds)

	r.Run()
}

func newFunction(funds []string, baseUrl string) bool {
	json := jsoniter.ConfigCompatibleWithStandardLibrary

	client := resty.New()
	client.JSONMarshal = json.Marshal
	client.JSONUnmarshal = json.Unmarshal

	for _, fund := range funds {
		url := baseUrl + fund
		resp, err := client.R().Get(url)

		if err != nil {
			log.Fatalln("Failed to get data for " + url)
		}

		var data AutoGenerated
		err = json.Unmarshal(resp.Body(), &data)
		if err != nil {
			fmt.Println(err)
			return true
		}

		var dbFund Fund
		err = DB.Where("avanza_id = ?", fund).First(&dbFund).Error

		if err == gorm.ErrRecordNotFound {

			dbFund := Fund{AvanzaId: fund, Name: data.Name}
			DB.Create(&dbFund)
		}

		fmt.Println()
		fmt.Println(data.Name)

		var temp FundHolding
		result := DB.Where("fund_id = ? and date = ? ", dbFund.ID, data.PortfolioDate).Find(&temp)
		if result.RowsAffected == 0 {
			for i, v := range data.HoldingChartData {
				fh := FundHolding{
					FundId:         dbFund.ID,
					Date:           data.PortfolioDate,
					Isin:           v.Isin,
					SizePercentage: v.Y,
					Name:           v.Name,
					Position:       i,
				}
				fmt.Println(i, v.Name, v.Y, "%", v.OrderbookID)
				DB.Create(&fh)
			}
		}
	}
	return false
}
